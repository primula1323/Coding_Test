p <- ncol(flea) - 1
G <- unique(flea$species)
# calculate W : within sum of squares
W <- matrix(0, nrow = p, ncol = p)
for (g in G) {
gData <- as.matrix(flea[flea$species == g, 2:7])
W <- W + t(scale(gData, scale=FALSE)) %*% (scale(gData, scale=FALSE))
}
Sp <- W / (n - length(G)) # pooled variance
# total variance = W + B = within variance + residual variance
Total_variance <- cov(flea[,2:7]) * (n-1) # total variance
B <- Total_variance - W # treatment variance
tmean <- c(colMeans(flea[, 2:7]))
B_new <- matrix(0, nrow = p, ncol = p)
for (g in G) {
gData <- as.matrix(flea[flea$species == g, 2:7])
n_g <- nrow(gData)
gmean <- c(colMeans(gData))
B_new <- B_new + n_g * outer(gmean-tmean, gmean-tmean)
}
B
B_new
# eigenvalues of inv(W)*B
eigendecom_result <- eigen(solve(W) %*% B)
eigendecom_result$values
result1 <- manova(as.matrix(flea[,2:7]) ~ species, data = flea)
result1
result_m
result_m <- manova(as.matrix(flea[,2:7]) ~ species, data = flea)
result_m
result_m
result_m
result_m
result_p <- summary(result_m, test = "Pillai") # Note that by default, Pillai's test statistic is used
result_p
summary(result_m)
result_w
result_w <- summary(result_m, test = "Wilks")
result_w
# Now see if the B and W matrices are computed as expected
# Compare the following with B and W
result_p$SS
result_w$SS
B
W
# Now see if the B and W matrices are computed as expected
# Compare the following with B and W
result_p$SS
eigen(result_p$SS)$values
eigen(result_p$SS)
# Now see if the B and W matrices are computed as expected
# Compare the following with B and W
result_p$SS
eigen(result_p$SS$species)
eigen(result_p$SS$residuals)
eigen(result_p$SS$Residuals)
eigen(result_p$SS$species)
eigen(result_p$SS$Residuals)
result_p$SS
B
W
result_p$SS$species == B
result_p$SS$Residuals == W
all.equal(result_p$SS$species, B)
all.equal(result_p$SS$species, B)
all.equal(result_p$SS$Residuals, W)
idendical(result_p$SS$Residuals, W)
identical(result_p$SS$Residuals, W)
all.equal(result_p$SS$species, B)
all.equal(result_p$SS$Residuals, W)
all.equal(B, B_new)
all.equal(result_w$SS$species, B)
all.equal(result_w$SS$Residuals, W)
eigen(B)$values
eigen(W)$values
eigen(B)$values
eigen(W)$values
eigen(W)$values > 0
eigen(B)$values > 0
# Now see if the B and W matrices are computed as expected
# Compare the following with B and W
pout$SS
sout$SS
# Example data: flea ------------------------------------------------------
library(dplyr)
library(GGally)
?flea
# Fairly small dataset on flea beetles
ggpairs(flea)
ggscatmat(flea, columns = 2:4, color = "species")
# To test whether the covariances are indeed equal, one may use the likelihood-ratio
# to test the null hypothesis H0: Sigma_1 = Sigma_2 = ... = Sigma_g
# A bias-corrected version of the LRT is called Box's M test
library(MVTests)
test_varequal <- BoxM(flea[,2:7], group = flea$species) #공분산행렬이 그룹별로 서로 같은지에 대한 테스트.
test_varequal$p.value
n <- nrow(flea)
p <- ncol(flea) - 1
uniq.id <- unique(flea$species)
mean_vectors <- vector()
W <- matrix(0, nrow = p, ncol = p)
for (gr.id in uniq.id) {
gData <- as.matrix( flea[flea$species == gr.id,2:7] )
W <- W + t( scale( gData, scale = FALSE))  %*%  (  scale( gData, scale = FALSE) )
mean_vectors <- cbind(mean_vectors,
colMeans(gData))
}
Sp <- W / (n - 3)
Tot <- cov(flea[,2:7]) * (n-1)
B <- Tot - W
out <- manova(as.matrix(flea[,2:7]) ~ species, data = flea)
out
summary(out)
# Note that by default, Pillai's test statistic is used
(pout <- summary(out, test = "Pillai"))
(sout <- summary(out, test = "Wilks"))
summary(out, test = "Hotelling-Lawley")
summary(out, test = "Roy")
# Now see if the B and W matrices are computed as expected
# Compare the following with B and W
pout$SS
sout$SS
B
W
# eigenvalues of inv(W)*B
eigen( solve(W) %*% B)
# Explicitly compute Wilk's test statistic
# |W|/|B+W| = prod {1 / (1+lambda)}
prod(1 / (1 + sout$Eigenvalues))
library(purrr)
library(modelr)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
eigen(B)
result_m <- manova(as.matrix(flea[,2:7]) ~ species, data = flea)
result_p <- summary(result_m, test = "Pillai") # default.
result_p
result_w <- summary(result_m, test = "Wilks")
result_w
result_h <- summary(result_m, test = "Hotelling-Lawley")
result_h
result_r <- summary(result_m, test = "Roy")
result_r
result_m <- manova(as.matrix(flea[,2:7]) ~ species, data = flea)
result_p <- summary(result_m, test = "Pillai") # default.
result_p
result_w <- summary(result_m, test = "Wilks")
result_w
result_h <- summary(result_m, test = "Hotelling-Lawley")
result_r <- summary(result_m, test = "Roy")
sum(eigen(B)$values > 0)
sum(eigen(B)$values > 0)
sum(eigen(W)$values > 0)
eigen(B)$values
View(B)
eigen(B)$values
sum(eigen(B)$values > 0)
sum(eigen(W)$values > 0)
# eigenvalues of inv(W)*B
eigen( solve(W) %*% B)
sout$Eigenvalues
sout$Eigenvalues
pout$Eigenvalues
set.seed(42)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
set.seed(42)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[1])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
set.seed(42)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[2])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
set.seed(42)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[4])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
set.seed(42)
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
actual_Wilk <- summary(manova(as.matrix(flea[,2:7]) ~ species, data = flea), test = "Wilks")$stats[3]
result_m
summary(result_w)$stats
summary(result_w)
result_w
result_w$stats
result_w$stats[3]
actual_Wilk <- result_w$stats[3]
sum(permuted_Wilk <= result_w$stats[3])/100
actual_Wilk <- result_w$stats[3] #
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
hist(permuted_Wilk)
sum(permuted_Wilk <= result_w$stats[3])/100
sum(permuted_Wilk <= result_w$stats[3])
permuted_wilk
permuted_wilk
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
permuted_wilk
permuted_Wilk
sum(permuted_Wilk <= result_w$stats[3])
permuted_Wilk
hist(permuted_Wilk)
permuted_Wilk
permuted_Wilk <= result_w$stats[3]
permuted_Wilk
set.seed(42)
permuted_Wilk
hist(permuted_Wilk)
sum(permuted_Wilk <= result_w$stats[3])
actual_Wilk <- result_w$stats[3] #
perms <- permute(flea,  100, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
permuted_Wilk
hist(permuted_Wilk)
sum(permuted_Wilk <= result_w$stats[3])
perms <- permute(flea,  1000, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
permuted_Wilk
sum(permuted_Wilk <= result_w$stats[3])
?permute
perms <- permute(flea, n=1000, species)
perms
perms[1]
perms[1][1]
perms$1
perms$id
perms$perm
perms$perm[1]
perms <- permute(flea, n=1000, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
permuted_Wilk
sum(permuted_Wilk <= result_w$stats[3])
(sout <- summary(out, test = "Wilks"))
hist(permuted_Wilk)
abline(v = actual_Wilk)
?map
p_value <- sum(permuted_Wilk <= actual_Wilk)/1000
p_value
hist(permuted_Wilk)
abline(v = actual_Wilk)
#library(purrr)
library(modelr)
perms <- permute(flea, 1000, species)
permuted_Wilk <- map(perms$perm,
~ summary(manova(as.matrix(flea[,2:7]) ~ species, data = .),test = "Wilks")$stats[3])
permuted_Wilk <- unlist(permuted_Wilk)
actual_Wilk <- result_w$stats[3]
p_value <- sum(permuted_Wilk <= actual_Wilk)/1000
p_value
hist(permuted_Wilk)
abline(v = actual_Wilk)
?map
qqnorm(flea[,2]); qqline(flea[,2])
for (i in 2:7) {
qqnorm(flea[,i]); qqline(flea[,i])
}
for (i in 2:7) {
qqnorm(flea[,i]); qqline(flea[,i])
graph_name <- paste('Normal Q-Q Plot for', names(flea)[i])
labels(graph_name)
}
for (i in 2:7) {
graph_name <- paste('Normal Q-Q Plot for', names(flea)[i])
qqnorm(flea[,i], main = graph_name)
qqline(flea[,i])
}
dmtx <- Scale(as.matrix(flea[, 2:7]), scale=FALSE)
dmtx <- scale(as.matrix(flea[, 2:7]), scale=FALSE)
View(dmtx)
Xc <- scale(as.matrix(flea[, 2:7]), scale=FALSE)
S <- t(Xc) %*% Xc
View(S)
View(Xc)
?ppoints()
Xc <- scale(as.matrix(flea[, 2:7]), scale=FALSE)
S <- t(Xc) %*% Xc
Mdist <- sqrt(diag(Xc %*% solve(S) %*% t(Xc)))
qqplot(qchisq(ppoints(1000), df=6), Mdist^2)
Xc <- scale(as.matrix(flea[, 2:7]), scale=FALSE)
S <- t(Xc) %*% Xc
Mdist <- sqrt(diag(Xc %*% solve(S) %*% t(Xc)))
qqplot(qchisq(ppoints(100), df=6), Mdist^2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
fig.align = 'center',
fig.width = 7,
fig.height = 5,
out.width = '80%',
dpi = 300
)
library(tidyverse)
comment = '
If this story was the one to draw a miracle,
when time comes someday I will be meeting you again
'
comment = '
If this story was the one to draw a miracle,
when time comes someday I will be meeting you again
'
help("list")
?list
# LHS is greater than RHS
4 > 7
9 > 0.6
8 > 8
# RHS is greater than LHS
4 < 7
9 < 0.6
8 < 8
# < : LHS is greater than RHS
4 > 7
# >= : LHS is greater than or equal to RHS
4 >= 7
9 >= 0.6
8 >= 8
# <= : RHS is greater than or equal to LHS
4 <= 7
9 <= 0.6
8 <= 8
# == : LHS is equal to RHS
4 == 7
9 == 0.6
8 == 8
# != : LHS is not equal to RHS
4 != 7
9 != 0.6
8 != 8
print(3&0)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
fig.align = 'center',
fig.width = 7,
fig.height = 5,
out.width = '80%',
dpi = 300
)
library(tidyverse)
library(glue) #
library(glue)
library(glue)
comment = '
The glue package contains functions for string interpolation:
gluing together character strings and R code.
'
print(3&0)
print(TRUE&FALSE)
print(3&0)
print(TRUE&FALSE)
print(-11|2)
print(TRUE|FALSE)
print(!1)
print(!TRUE)
#print(paste(, sep=''))
#print(paste0)
#cat()
mode(a)
a <- c(a1, a2, a3, a4, a5, a6)
a1 <- 5
a2 <- 2.5
a3 <- 5L
a4 <- 'a'
a5 <- 'asdf'
a6 <- TRUE
a <- c(a1, a2, a3, a4, a5, a6)
mode(a)
a1 <- 5
a2 <- 2.5
a3 <- 5L
a4 <- 'a'
a5 <- 'asdf'
a6 <- TRUE
a <- c(a1, a2, a3, a4, a5, a6)
mode(a)
a <- df(a1, a2, a3, a4, a5, a6)
a <- (a1, a2, a3, a4, a5, a6)
a <- list(a1, a2, a3, a4, a5, a6)
mode(a)
mode(a1)
mode(a1, a2, a3)
mode(a1)
mode(a1)
mode(a2)
mode(a3)
mode(a4)
mode(a5)
mode(a6)
a1 <- 5
a2 <- 2.5
a3 <- 5L
a4 <- 'a'
a5 <- 'asdf'
a6 <- TRUE
mode(a1)
mode(a2)
mode(a3)
mode(a4)
mode(a5)
mode(a6)
a1 <- 5
a2 <- 2.5
a3 <- 5L
a4 <- 'a'
a5 <- 'asdf'
a6 <- TRUE
mode(a1)
mode(a2)
mode(a3)
mode(a4)
mode(a5)
mode(a6)
typeof(a1)
typeof(a2)
typeof(a3)
typeof(a4)
typeof(a5)
typeof(a6)
v1 <- c(1, 2, 3, 5, 7)
v2 <- 6:10
v3 <- seq(from=10, to=1, by=3)
v1 <- c(1, 2, 3, 5, 7)
v2 <- 6:10
v3 <- seq(from=10, to=1, by=-3)
v4 <- c(rep(c(1,2), 3))
cat(v1, v2, v3, v4)
v1 <- c(1, 2, 3, 5, 7)
v2 <- 6:10
v3 <- seq(from=10, to=1, by=-4)
v4 <- c(rep(c(1,2), 3))
cat(v1, v2, v3, v4)
s1 <- 'asdf'
s2 <- 'tmf'
s3 <- 'lly'
s4 <- 'kyobo'
print(paste0(s1, s3))
s5 <- 4+5
print(paste(s2, s5, sep=''))
s1 <- 'asdf'
s2 <- 'tmf'
s3 <- 'lly'
s4 <- 'kyobo'
s5 <- 4+5
print(s1)
print(paste0(s1, s3))
print(paste(s2, s5, sep=''))
cat(s3, s2)
v1[v1%%2 == 0]
v1[1]
v1[-2]
v1[v1%%2 == 0]
v1[v1%/%2 == 0]
v1[1]
v1[-2]
v1[v1%/%2 == 0]
v1[1]
v1[-2]
v1[v1%2 == 0]
v1[v1%/%2 == 0]
v1[v1/%/2 == 0]
v1[v1%%2 == 0]
v1[v1%%2 == 1]
v1[1]
v1[-2]
v1[v1%%2 == 1]
v1[2:4]
v1[1, 3]
v1[1]
v1[-2]
v1[v1%%2 == 1]
v1[2:4]
v1[c(1, 3)]
v1[1]
v1[-2]
v1[v1%%2 == 1]
v1[2:4]
v1[c(1, 5)]
lkst = list(vec=v1, df=a2)
lkst
lkst = list(vec=v1, vl=a2)
lkst
lkst$vec
lkst$vec[1]
lkst$vl
